"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceAwareConstruct = exports.ResourceAwareStack = exports.ParameterAwareProps = exports.ResourceBag = void 0;
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT-0
const constructs_1 = require("constructs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
class ResourceBag {
    constructor(resources) {
        if (resources && resources.getResources()) {
            if (!this.resources)
                this.resources = new Map();
            resources.getResources().forEach((v, k) => {
                this.resources.set(k.toLowerCase(), v);
            });
        }
        ;
    }
    getResources() {
        return this.resources;
    }
    ;
    addResources(resources) {
        if (resources) {
            if (!this.resources)
                this.resources = new Map();
            for (let resourceName of resources.keys()) {
                let name = resourceName.toLowerCase();
                this.resources.set(name, resources.get(name));
            }
        }
    }
    ;
    addResource(key, resource) {
        if (resource) {
            if (!this.resources)
                this.resources = new Map();
            this.resources.set(key.toLowerCase(), resource);
        }
    }
    getResource(key) {
        return this.resources.get(key.toLowerCase());
    }
    getResourcesNames() {
        if (this.resources)
            return this.resources.keys();
        else
            return [];
    }
}
exports.ResourceBag = ResourceBag;
class ParameterAwareProps {
    constructor(props) {
        this.applicationName = (props && props.applicationName && props.applicationName.length > 0) ? props.applicationName : ParameterAwareProps.defaultApplicationName;
        if (props) {
            this.region = props.region;
            this.accountId = props.accountId;
            if (props.getParameters())
                props.getParameters().forEach((v, k) => this.addParameter(k, v));
        }
    }
    setApplicationName(appName) {
        if (appName && appName.length > 0)
            this.applicationName = appName.toUpperCase();
    }
    getApplicationName() {
        let appName = this.applicationName ? this.applicationName : ParameterAwareProps.defaultApplicationName;
        return appName;
    }
    getParameters() {
        return this.parameters;
    }
    ;
    addParameters(parameters) {
        if (parameters) {
            if (!this.parameters)
                this.parameters = new Map();
            for (let parameterName of parameters.keys()) {
                this.parameters.set(parameterName.toLowerCase(), parameters.get(parameterName));
            }
        }
    }
    ;
    addParameter(key, parameter) {
        if (parameter) {
            if (!this.parameters)
                this.parameters = new Map();
            this.parameters.set(key.toLowerCase(), parameter);
        }
    }
    getParameter(key) {
        if (!this.parameters)
            this.parameters = new Map();
        return this.parameters.get(key.toLowerCase());
    }
}
exports.ParameterAwareProps = ParameterAwareProps;
// handling/defining the application name.
// Default is NRTA - Near Real-Time Application
ParameterAwareProps.defaultApplicationName = 'NRTA';
class ResourceAwareStack extends aws_cdk_lib_1.Stack {
    constructor(parent, name, props) {
        super(parent, name, props);
        if (this.scope)
            this.scope = parent;
        if (!this.properties)
            this.properties = new ParameterAwareProps(props);
        if (!this.properties.accountId)
            this.properties.accountId = this.account;
        if (!this.properties.region)
            this.properties.region = this.region;
    }
    getResources() {
        return this.resources;
    }
    ;
    addResources(resources) {
        if (resources) {
            if (!this.resources)
                this.resources = new Map();
            for (let resourceName of resources.keys()) {
                let name = resourceName.toLowerCase();
                this.resources.set(name, resources.get(name));
            }
        }
    }
    ;
    addResource(key, resource) {
        if (resource) {
            if (!this.resources)
                this.resources = new Map();
            this.resources.set(key.toLowerCase(), resource);
        }
    }
    getResource(key) {
        if (!this.resources)
            this.resources = new Map();
        return this.resources.get(key.toLowerCase());
    }
    getResourcesNames() {
        if (this.resources)
            return this.resources.keys();
        else
            return [];
    }
    getProperties() {
        return this.properties;
    }
}
exports.ResourceAwareStack = ResourceAwareStack;
class ResourceAwareConstruct extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.properties = props;
    }
    getResources() {
        return this.resources;
    }
    ;
    addResources(resources) {
        if (resources) {
            if (!this.resources)
                this.resources = new Map();
            for (let resourceName of resources.keys()) {
                let name = resourceName.toLowerCase();
                this.resources.set(name, resources.get(name));
            }
        }
    }
    ;
    addResource(key, resource) {
        if (resource) {
            if (!this.resources)
                this.resources = new Map();
            this.resources.set(key.toLowerCase(), resource);
        }
    }
    getResource(key) {
        return this.resources.get(key.toLowerCase());
    }
    getResourcesNames() {
        if (this.resources)
            return this.resources.keys();
        else
            return [];
    }
    getProperties() {
        return this.properties;
    }
}
exports.ResourceAwareConstruct = ResourceAwareConstruct;
//# sourceMappingURL=data:application/json;base64,