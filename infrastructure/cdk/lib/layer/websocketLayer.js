"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketLayer = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const resourceawarestack_1 = require("./../resourceawarestack");
const Lambda = require("aws-cdk-lib/aws-lambda");
const IAM = require("aws-cdk-lib/aws-iam");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const path = require("path");
const lambdasLocation = path.join(__dirname, '..', '..', 'lambdas');
class WebSocketLayer extends resourceawarestack_1.ResourceAwareConstruct {
    constructor(parent, name, props) {
        super(parent, name, props);
        let createdFunction = null;
        createdFunction = this.getWebSocketConnectFunction();
        if (createdFunction)
            this.webSocketConnectFunction = createdFunction;
        createdFunction = this.getWebSocketSynchronizeFunction();
        if (createdFunction)
            this.webSocketSynchronizeFunction = createdFunction;
        createdFunction = this.getWebSocketDisconnectFunction();
        if (createdFunction)
            this.webSocketDisconnectFunction = createdFunction;
    }
    getWebSocketFunctionArn() {
        return this.webSocketConnectFunction.functionArn;
    }
    getWebSocketFunctionRef() {
        return this.webSocketConnectFunction;
    }
    getWebSocketSynchronizeFunctionArn() {
        return this.webSocketSynchronizeFunction.functionArn;
    }
    getWebSocketSynchronizeFunctionRef() {
        return this.webSocketSynchronizeFunction;
    }
    getWebSocketDisconnectFunctionArn() {
        return this.webSocketDisconnectFunction.functionArn;
    }
    getWebSocketDisconnectFunctionRef() {
        return this.webSocketDisconnectFunction;
    }
    getWebSocketConnectFunction() {
        /**
         * This function requires access to
         * SystemsManager
         *      process.env.SESSION_PARAMETER = /<getAppRefName>/session
         * DynamoDB Tables
         *      process.env.SESSION_CONTROL_TABLENAME = getAppRefName+'SessionControl'
         */
        let sessionParameter = { name: '/' + this.properties.getApplicationName().toLocaleLowerCase() + '/session' };
        let sessionControlTable = this.properties.getParameter('table.sessioncontrol');
        if (sessionParameter && sessionControlTable) {
            let createdFunction = new Lambda.Function(this, this.properties.getApplicationName() + 'WebSocketConnect', {
                runtime: Lambda.Runtime.NODEJS_14_X,
                handler: 'index.handler',
                code: Lambda.Code.fromAsset(path.join(lambdasLocation, 'websocketConnect')),
                environment: {
                    'SESSION_CONTROL_TABLENAME': sessionControlTable.tableName,
                    'SESSION_PARAMETER': sessionParameter.name
                },
                functionName: this.properties.getApplicationName() + 'WebSocketConnect',
                description: 'This function stores the connectionID to DynamoDB',
                memorySize: 128,
                timeout: aws_cdk_lib_1.Duration.seconds(60),
                role: new IAM.Role(this, this.properties.getApplicationName() + 'WebSocketConnectFn_Role', {
                    roleName: this.properties.getApplicationName() + 'WebSocketConnectFn_Role',
                    assumedBy: new IAM.ServicePrincipal('lambda.amazonaws.com'),
                    managedPolicies: [aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole')],
                    inlinePolicies: {
                        'DynamoDBPermissions': new IAM.PolicyDocument({
                            statements: [
                                new IAM.PolicyStatement({
                                    resources: [sessionControlTable.tableArn],
                                    actions: ['dynamodb:UpdateItem']
                                })
                            ]
                        }),
                        'SystemsManagerPermissions': new IAM.PolicyDocument({
                            statements: [
                                new IAM.PolicyStatement({
                                    resources: ['arn:aws:ssm:' + this.properties.region + ':' + this.properties.accountId + ':parameter' + sessionParameter.name],
                                    actions: ['ssm:GetParameter', 'ssm:GetParameters']
                                })
                            ]
                        })
                    }
                })
            });
            return createdFunction;
        }
        else
            return undefined;
    }
    getWebSocketSynchronizeFunction() {
        /**
         * This function requires access to
         * SystemsManager
         *      process.env.SESSION_PARAMETER = /<getAppRefName>/session
         * DynamoDB Tables
         *      process.env.SESSION_CONTROL_TABLENAME = getAppRefName+'SessionControl'
         */
        let sessionParameter = { name: '/' + this.properties.getApplicationName().toLocaleLowerCase() + '/session' };
        let sessionControlTable = this.properties.getParameter('table.sessioncontrol');
        if (sessionParameter && sessionControlTable) {
            let createdFunction = new Lambda.Function(this, this.properties.getApplicationName() + 'WebSocketSynchronizeStart', {
                runtime: Lambda.Runtime.NODEJS_14_X,
                handler: 'index.handler',
                code: Lambda.Code.fromAsset(path.join(lambdasLocation, 'synchronousStart')),
                environment: {
                    'SESSION_CONTROL_TABLENAME': sessionControlTable.tableName,
                    'SESSION_PARAMETER': sessionParameter.name
                },
                functionName: this.properties.getApplicationName() + 'WebSocketSynchronizeStart',
                description: 'This function invokes the WebSocket to start the AAA Game',
                memorySize: 128,
                timeout: aws_cdk_lib_1.Duration.seconds(60),
                role: new IAM.Role(this, this.properties.getApplicationName() + 'WebSocketSynchronizeStartFn_Role', {
                    roleName: this.properties.getApplicationName() + 'WebSocketSynchronizeStartFn_Role',
                    assumedBy: new IAM.ServicePrincipal('lambda.amazonaws.com'),
                    managedPolicies: [aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole')],
                    inlinePolicies: {
                        'DynamoDBPermissions': new IAM.PolicyDocument({
                            statements: [
                                new IAM.PolicyStatement({
                                    resources: [sessionControlTable.tableArn],
                                    actions: ['dynamodb:UpdateItem', 'dynamodb:GetItem']
                                })
                            ]
                        }),
                        'SystemsManagerPermissions': new IAM.PolicyDocument({
                            statements: [
                                new IAM.PolicyStatement({
                                    resources: ['arn:aws:ssm:' + this.properties.region + ':' + this.properties.accountId + ':parameter' + sessionParameter.name],
                                    actions: ['ssm:GetParameter', 'ssm:GetParameters', 'ssm:PutParameter']
                                })
                            ]
                        })
                    }
                })
            });
            return createdFunction;
        }
        else
            return undefined;
    }
    getWebSocketDisconnectFunction() {
        /**
         * This function requires access to
         * SystemsManager
         *      process.env.SESSION_PARAMETER = /<getAppRefName>/session
         * DynamoDB Tables
         *      process.env.SESSION_CONTROL_TABLENAME = getAppRefName+'SessionControl'
         */
        let sessionParameter = { name: '/' + this.properties.getApplicationName().toLocaleLowerCase() + '/session' };
        let sessionControlTable = this.properties.getParameter('table.sessioncontrol');
        if (sessionParameter && sessionControlTable) {
            let createdFunction = new Lambda.Function(this, this.properties.getApplicationName() + 'WebSocketDisconnect', {
                runtime: Lambda.Runtime.NODEJS_14_X,
                handler: 'index.handler',
                code: Lambda.Code.fromAsset(path.join(lambdasLocation, 'websocketDisconnect')),
                environment: {
                    'SESSION_CONTROL_TABLENAME': sessionControlTable.tableName,
                    'SESSION_PARAMETER': sessionParameter.name
                },
                functionName: this.properties.getApplicationName() + 'WebSocketDisconnect',
                description: 'This function deletes the connectionID to DynamoDB',
                memorySize: 128,
                timeout: aws_cdk_lib_1.Duration.seconds(60),
                role: new IAM.Role(this, this.properties.getApplicationName() + 'WebSocketDisconnectFn_Role', {
                    roleName: this.properties.getApplicationName() + 'WebSocketDisconnectFn_Role',
                    assumedBy: new IAM.ServicePrincipal('lambda.amazonaws.com'),
                    managedPolicies: [aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole')],
                    inlinePolicies: {
                        'DynamoDBPermissions': new IAM.PolicyDocument({
                            statements: [
                                new IAM.PolicyStatement({
                                    resources: [sessionControlTable.tableArn],
                                    actions: ['dynamodb:UpdateItem', 'dynamodb:GetItems', 'dynamodb:GetItem']
                                })
                            ]
                        }),
                        'SystemsManagerPermissions': new IAM.PolicyDocument({
                            statements: [
                                new IAM.PolicyStatement({
                                    resources: ['arn:aws:ssm:' + this.properties.region + ':' + this.properties.accountId + ':parameter' + sessionParameter.name],
                                    actions: ['ssm:GetParameter', 'ssm:GetParameters']
                                })
                            ]
                        })
                    }
                })
            });
            return createdFunction;
        }
        else
            return undefined;
    }
}
exports.WebSocketLayer = WebSocketLayer;
//# sourceMappingURL=data:application/json;base64,