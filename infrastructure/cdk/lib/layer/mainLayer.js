"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MainLayer = void 0;
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT-0
const aws_cdk_lib_1 = require("aws-cdk-lib");
const resourceawarestack_1 = require("../resourceawarestack");
const securityLayer_1 = require("./securityLayer");
const configurationLayer_1 = require("./configurationLayer");
const storageLayer_1 = require("./storageLayer");
const databaseLayer_1 = require("./databaseLayer");
const ingestionConsumptionLayer_1 = require("./ingestionConsumptionLayer");
const processingLayer_1 = require("./processingLayer");
const websocketLayer_1 = require("./websocketLayer");
const contentDeliveryLayer_1 = require("./contentDeliveryLayer");
var DEPLOY_CDN = false;
var SESSION_PARAMETER = false;
class MainLayer extends resourceawarestack_1.ResourceAwareStack {
    constructor(scope, id, props) {
        super(scope, id, props);
        if (props && props.getParameter("deploycdn"))
            DEPLOY_CDN = true;
        if (props && props.getParameter("sessionparameter"))
            SESSION_PARAMETER = true;
        this.buildResources();
    }
    buildResources() {
        // security layer
        let securityLayer = new securityLayer_1.SecurityLayer(this, 'SecurityLayer', this.properties);
        // configuration layer
        let configLayerProps = new resourceawarestack_1.ParameterAwareProps(this.properties);
        let ssmProperties = new Map();
        ssmProperties.set("Region", this.region);
        ssmProperties.set("ClientId", securityLayer.getUserPoolClientId());
        ssmProperties.set("UserpoolId", securityLayer.getUserPoolId());
        ssmProperties.set("UserPoolURL", securityLayer.getUserPoolUrl());
        ssmProperties.set("IdentityPoolId", securityLayer.getIdentityPoolId());
        if (SESSION_PARAMETER)
            ssmProperties.set("Session", "null");
        configLayerProps.addParameter('ssmParameters', ssmProperties);
        let configLayer = new configurationLayer_1.ConfigurationLayer(this, 'ConfigurationLayer', configLayerProps);
        // storage layer
        let storageLayer = new storageLayer_1.StorageLayer(this, 'StorageStorage', this.properties);
        let cdnLayer = null;
        if (DEPLOY_CDN) {
            let cdnLayerProps = new resourceawarestack_1.ParameterAwareProps(this.properties);
            cdnLayerProps.addParameter('appbucket', storageLayer.getResource('appbucket'));
            cdnLayer = new contentDeliveryLayer_1.ContentDeliveryLayer(this, 'ContentDeliveryLayer', cdnLayerProps);
        }
        // database layer
        let databaseLayer = new databaseLayer_1.DatabaseLayer(this, 'DatabaseLayer', this.properties);
        // processing layer
        let processingLayerProps = new resourceawarestack_1.ParameterAwareProps(this.properties);
        if (SESSION_PARAMETER)
            processingLayerProps.addParameter('parameter.session', configLayer.getResource('parameter.session'));
        processingLayerProps.addParameter('table.sessionControl', databaseLayer.getResource('table.sessionControl'));
        processingLayerProps.addParameter('table.sessionTopX', databaseLayer.getResource('table.sessionTopX'));
        processingLayerProps.addParameter('table.session', databaseLayer.getResource('table.session'));
        let processingLayer = new processingLayer_1.ProcessingLayer(this, 'ProcessingLayer', processingLayerProps);
        // WebSocket Layer
        let webSocketLayerProps = new resourceawarestack_1.ParameterAwareProps(this.properties);
        webSocketLayerProps.addParameter('table.sessionControl', databaseLayer.getResource('table.sessionControl'));
        new websocketLayer_1.WebSocketLayer(this, 'WebSocketLayer', webSocketLayerProps);
        // Ingestion/consumption layer 
        let ingestionConsumptionLayerProps = new resourceawarestack_1.ParameterAwareProps(processingLayerProps);
        ingestionConsumptionLayerProps.addParameter('rawbucketarn', storageLayer.getRawDataBucketArn());
        ingestionConsumptionLayerProps.addParameter('userpool', securityLayer.getUserPoolArn());
        ingestionConsumptionLayerProps.addParameter('userpoolid', securityLayer.getUserPoolId());
        ingestionConsumptionLayerProps.addParameter('table.session', databaseLayer.getResource('table.session'));
        ingestionConsumptionLayerProps.addParameter('table.sessiontopx', databaseLayer.getResource('table.sessiontopx'));
        ingestionConsumptionLayerProps.addParameter('lambda.allocate', processingLayer.getAllocateFunctionRef());
        ingestionConsumptionLayerProps.addParameter('lambda.deallocate', processingLayer.getDeallocateFunctionArn());
        ingestionConsumptionLayerProps.addParameter('lambda.scoreboard', processingLayer.getScoreboardFunctionRef());
        ingestionConsumptionLayerProps.addParameter('security.playersrole', securityLayer.getResource('security.playersrole'));
        ingestionConsumptionLayerProps.addParameter('security.managersrole', securityLayer.getResource('security.managersrole'));
        let icl = new ingestionConsumptionLayer_1.IngestionConsumptionLayer(this, 'IngestionConsumptionLayer', ingestionConsumptionLayerProps);
        new aws_cdk_lib_1.CfnOutput(this, "apigtw", {
            description: "API Gateway URL",
            value: icl.getResource("apigtw.url"),
            exportName: this.properties.getApplicationName().toLocaleLowerCase() + ":apigtw"
        });
        new aws_cdk_lib_1.CfnOutput(this, "region", {
            description: "region",
            value: this.region,
            exportName: this.properties.getApplicationName().toLocaleLowerCase() + ":region"
        });
        new aws_cdk_lib_1.CfnOutput(this, "envname", {
            description: "Environment name",
            value: this.properties.getApplicationName(),
            exportName: this.properties.getApplicationName().toLocaleLowerCase() + ":envname"
        });
        if (cdnLayer) {
            new aws_cdk_lib_1.CfnOutput(this, "url", {
                description: "Cloudfront domain for the website (Cloudfront distribution)",
                value: cdnLayer.getResource("cdndomain"),
                exportName: this.properties.getApplicationName().toLocaleLowerCase() + ":url"
            }).node.addDependency(cdnLayer);
        }
    }
}
exports.MainLayer = MainLayer;
//# sourceMappingURL=data:application/json;base64,